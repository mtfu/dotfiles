[core]
	editor = nvim -u ~/.vimrc.minimal
	excludesFile = ~/.gitignore_global
	autocrlf = false
[commit]
	verbose = true
[include]
    # A local gitconfig, outside of version control.
    # If the file doesn't exist it is silently ignored
    path = ~/.gitconfig.local
[alias]
    main-branch = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4
	tree = log --graph --all --pretty=format:'%C(yellow)%h -%C(auto)%d %C(bold white)%s %C(bold cyan)(%cr)%Creset %C(dim white)<%an>'
	treeStat = log --graph --all --pretty=format:'%C(yellow)%h -%C(auto)%d %C(bold cyan)%s %C(bold white)(%cr)%Creset %C(dim white)<%an>' --stat
    lg = log --pretty='%C(red)%h%Creset%C(yellow)%d Creset%s %C(cyan)(%ar)%Creset'
	logChangesPerFile = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%C(bold white)%s %C(dim white)<%an>' --decorate --numstat
	chaseFile = log --follow -p --
	publish = "!git push -u origin \"$(git rev-parse --abbrev-ref HEAD)\""
	prunebranches = remote prune origin
    pruneLocal = "!git branch --merged | grep  -v '\\*\\|master\\|develop\\|main' | xargs -n 1 git branch -d"
	removeLocalBranches = "!git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done"
	a = add .
	s = status
	c = commit
    ch = checkout
	f = fetch
	d = branch -d
	ca = commit --amend 
    new = "!git lg $(git main-branch)..HEAD"
    missing = "!git lg HEAD..$(git main-branch)"
	mdev = "!git fetch && git merge origin $(git main-branch)"
	tagHistory = for-each-ref --format="%(refname:short) %(taggerdate) %(subject) %(body)" refs/tags
[diff]
	guitool = kdiff3
[difftool "kdiff3"]
	path = C:/Program Files/KDiff3/kdiff3.exe
	trustExitCode = false
[merge]
	tool = kdiff3
[mergetool]
	keepBackup = false
[mergetool "kdiff3"]
	path = C:/Program Files/KDiff3/kdiff3.exe
	trustExitCode = false
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[safe]
	directory = *
[rebase]
	autosquash = true
[rerere]
	enabled = true
